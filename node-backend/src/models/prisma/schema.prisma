generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("AZURE_SQL_URL")
}

model cognitive_level {
  id                               Int                                @id @default(autoincrement())
  level                            String                             @unique @db.VarChar(10)
  learning_outcome_cognitive_level learning_outcome_cognitive_level[]
}

model interaction {
  id                   Int               @id @default(autoincrement())
  interaction_type     String            @db.VarChar(30)
  interaction_response String            @db.VarChar(Max)
  attempts             Int
  date                 DateTime          @default(now()) @db.Date
  time_spent           DateTime          @db.Time
  learning_material_id String
  learning_material    learning_material @relation(fields: [learning_material_id], references: [id], onUpdate: NoAction, map: "FK__interacti__learn__7795AE5F")
}

model labsheet {
  id                String              @id
  learning_material learning_material   @relation(fields: [id], references: [id], onUpdate: NoAction)
  labsheet_question labsheet_question[]
}

model labsheet_question {
  id          Int      @id @default(autoincrement())
  question    String   @db.VarChar(200)
  answer      String   @db.VarChar(2000)
  labsheet_id String
  labsheet    labsheet @relation(fields: [labsheet_id], references: [id], onUpdate: NoAction)
}

model learner {
  id                String              @id @default(cuid())
  first_name        String              @db.VarChar(30)
  last_name         String              @db.VarChar(30)
  student_id        String              @unique @db.VarChar(10)
  email             String              @unique @db.VarChar(30)
  password          String              @unique @db.VarChar(60)
  learning_material learning_material[]
  system_log        system_log[]
  session           session[]
}

model session {
  id         String   @id @default(cuid())
  userId     String
  user       learner  @relation(fields: [userId], references: [id])
  valid      Boolean  @default(true)
  userAgent  String
  create_at  DateTime @default(now())
  updated_at DateTime @updatedAt
}

model learning_material {
  id                String        @id @default(cuid())
  learning_level    String        @db.VarChar(12)
  completion_status Decimal       @db.Decimal(18, 0)
  lesson_id         Int
  interaction       interaction[]
  labsheet          labsheet?
  learner_id        String
  learner           learner       @relation(fields: [learner_id], references: [id], onUpdate: NoAction)
  lesson            lesson        @relation(fields: [lesson_id], references: [id], onUpdate: NoAction)
  lecture           lecture?
  tutorial          tutorial?
  create_at         DateTime      @default(now())
  updated_at        DateTime      @default(now()) @updatedAt
}

model learning_outcome {
  id                               Int                                @id @default(autoincrement())
  description                      String                             @unique @db.VarChar(250)
  learning_outcome_cognitive_level learning_outcome_cognitive_level[]
  lesson_learning_outcome          lesson_learning_outcome[]

  @@index([description], name: "description")
}

model learning_outcome_cognitive_level {
  learning_outcome_id Int
  cognitive_level_id  Int
  cognitive_level     cognitive_level  @relation(fields: [cognitive_level_id], references: [id], onUpdate: NoAction)
  learning_outcome    learning_outcome @relation(fields: [learning_outcome_id], references: [id], onUpdate: NoAction)

  @@id([learning_outcome_id, cognitive_level_id])
}

model lecture {
  id                String            @id
  learning_material learning_material @relation(fields: [id], references: [id], onUpdate: NoAction)
  sub_lecture       sub_lecture[]
}

model lesson {
  id                       Int                       @id @default(autoincrement())
  title                    String                    @db.VarChar(100)
  description              String                    @db.VarChar(2000)
  module_id                Int
  learning_materials       learning_material[]
  module                   module                    @relation(fields: [module_id], references: [id], onUpdate: NoAction)
  lesson_learning_outcomes lesson_learning_outcome[]
  lesson_subtopics         lesson_subtopic[]
}

model lesson_subtopic {
  id                Int                 @id() @default(autoincrement())
  topic             String              @db.VarChar(200)
  description       String              @db.VarChar(Max)
  lesson_id         Int
  lesson            lesson              @relation(fields: [lesson_id], references: [id], onUpdate: NoAction)
  tutorial_question tutorial_question[]
}

model lesson_learning_outcome {
  lesson_id           Int
  learning_outcome_id Int
  learning_outcome    learning_outcome @relation(fields: [learning_outcome_id], references: [id], onUpdate: NoAction)
  lesson              lesson           @relation(fields: [lesson_id], references: [id], onUpdate: NoAction)

  @@id([lesson_id, learning_outcome_id])
}

model module {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(20)
  description String   @db.VarChar(1000)
  lessons     lesson[]
}

model sub_lecture {
  id         Int     @id @default(autoincrement())
  title      String  @db.VarChar(50)
  content    String? @db.VarChar(Max)
  lecture_id String
  lecture    lecture @relation(fields: [lecture_id], references: [id], onUpdate: NoAction)
}

model system_log {
  id         Int      @id @default(autoincrement())
  action     String   @db.VarChar(30)
  timestamp  DateTime @default(dbgenerated("getutcdate()")) @db.DateTime
  learner_id String
  learner    learner  @relation(fields: [learner_id], references: [id], onUpdate: NoAction)
}

model tutorial {
  id                String              @id
  status            String              @db.VarChar(20)
  current_question  Int                 @default(1)
  learning_material learning_material   @relation(fields: [id], references: [id], onUpdate: NoAction)
  questions         tutorial_question[]
}

model tutorial_question {
  id                        Int                        @id @default(autoincrement())
  question                  String                     @db.VarChar(300)
  answer                    String                     @db.VarChar(MAX)
  tutorial_id               String
  question_number           Int
  type                      String                     @db.VarChar(20)
  student_answer            String?                    @db.VarChar(MAX)
  feedback_type             String?                    @db.VarChar(10)
  is_student_answer_correct Boolean?
  tutorial                  tutorial                   @relation(fields: [tutorial_id], references: [id], onUpdate: NoAction)
  options                   tutorial_question_option[]
  //new
  subtopic_id               Int
  subtopic                  lesson_subtopic            @relation(fields: [subtopic_id], references: [id], onUpdate: NoAction)
  feedback                  String?                    @db.VarChar(Max)
}

model tutorial_question_option {
  id                 Int               @id @default(autoincrement())
  text               String            @db.VarChar(300)
  tutorialQuestionId Int
  tutorial_question  tutorial_question @relation(fields: [tutorialQuestionId], references: [id])
}
