generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("AZURE_SQL_URL")
}

model cognitive_level {
  id                                Int                                 @id @default(autoincrement())
  level                             String                              @unique @db.VarChar(10)
  learning_outcome                  learning_outcome[]
  tutorial_question_cognitive_level tutorial_question_cognitive_level[]
}

model interaction {
  id                   Int                   @id @default(autoincrement())
  learning_material_id String                @db.VarChar(25)
  learning_material    learning_material     @relation(fields: [learning_material_id], references: [id], onUpdate: NoAction)
  labsheet_interaction labsheet_interaction?
  lecture_interaction  lecture_interaction?
  tutorial_interaction tutorial_interaction?
}

model labsheet {
  id                     String              @id @db.VarChar(25)
  real_world_scenario    String?             @db.VarChar(Max)
  support_material       String?             @db.VarChar(Max)
  current_question_index Int                 @default(1)
  status                 String              @db.VarChar(20)
  labsheet_question      labsheet_question[]
  learning_material      learning_material   @relation(fields: [id], references: [id], onUpdate: NoAction)
}

model labsheet_question {
  id                   Int                    @id @default(autoincrement())
  question_number      Int
  question             String                 @db.VarChar(1000)
  answer               String                 @db.VarChar(2000)
  example_question     String                 @db.VarChar(1000)
  example_answer       String                 @db.VarChar(1000)
  is_correct           Boolean?
  is_answer_submitted  Boolean
  reflection_on_answer String?                @db.VarChar(5000)
  student_answers      student_answer[]
  labsheet_id          String                 @db.VarChar(25)
  labsheet             labsheet               @relation(fields: [labsheet_id], references: [id], onUpdate: NoAction)
  labsheet_interaction labsheet_interaction[]
}

model student_answer {
  id                   Int               @id @default(autoincrement())
  student_answer       String            @db.VarChar(500)
  labsheet_question    labsheet_question @relation(fields: [labsheet_question_id], references: [id])
  labsheet_question_id Int
}

model session {
  id         String   @id @default(cuid()) @db.VarChar(25)
  user_agent String   @db.VarChar(MAX)
  is_valid   Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  person_id  String   @db.VarChar(25)
  person     person   @relation(fields: [person_id], references: [id], onUpdate: NoAction)
}

model learning_material {
  id                String        @id @default(cuid()) @db.VarChar(25)
  learning_level    String        @db.VarChar(12)
  completion_status Decimal       @db.Decimal(18, 0)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  learner_id        String        @db.VarChar(25)
  lesson_id         Int
  interaction       interaction[]
  labsheet          labsheet?
  learner           person        @relation(fields: [learner_id], references: [id], onUpdate: NoAction)
  lesson            lesson        @relation(fields: [lesson_id], references: [id], onUpdate: NoAction)
  lecture           lecture?
  tutorial          tutorial?
}

model learning_outcome {
  id                      Int                       @id @default(autoincrement())
  description             String                    @unique @db.VarChar(250)
  cognitive_level_id      Int
  cognitive_level         cognitive_level           @relation(fields: [cognitive_level_id], references: [id], onUpdate: NoAction)
  lesson_learning_outcome lesson_learning_outcome[]
}

// model learning_outcome_cognitive_level {
//   learning_outcome_id Int
//   cognitive_level_id  Int
//   cognitive_level     cognitive_level  @relation(fields: [cognitive_level_id], references: [id], onUpdate: NoAction)
//   learning_outcome    learning_outcome @relation(fields: [learning_outcome_id], references: [id], onUpdate: NoAction)

//   @@id([learning_outcome_id, cognitive_level_id])
// }

model lecture {
  id                  String                @id @db.VarChar(25)
  learning_material   learning_material     @relation(fields: [id], references: [id], onUpdate: NoAction)
  lecture_interaction lecture_interaction[]
  sub_lecture         sub_lecture[]
}

model lesson {
  id                       Int                       @id @default(autoincrement())
  title                    String                    @db.VarChar(100)
  description              String                    @db.VarChar(2000)
  module_id                Int
  learning_materials       learning_material[]
  module                   module                    @relation(fields: [module_id], references: [id], onUpdate: NoAction)
  lesson_learning_outcomes lesson_learning_outcome[]
  sub_lessons              sub_lesson[]
}

model sub_lesson {
  id                Int                 @id @default(autoincrement())
  topic             String              @db.VarChar(200)
  description       String              @db.VarChar(Max)
  lesson_id         Int
  lesson            lesson              @relation(fields: [lesson_id], references: [id], onUpdate: NoAction)
  tutorial_question tutorial_question[]
}

model lesson_learning_outcome {
  lesson_id           Int
  learning_outcome_id Int
  learning_outcome    learning_outcome @relation(fields: [learning_outcome_id], references: [id], onUpdate: NoAction)
  lesson              lesson           @relation(fields: [lesson_id], references: [id], onUpdate: NoAction)

  @@id([lesson_id, learning_outcome_id])
}

model module {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(20)
  description String   @db.VarChar(1000)
  lessons     lesson[]
}

model sub_lecture {
  id         Int     @id @default(autoincrement())
  title      String  @db.VarChar(50)
  content    String? @db.VarChar(Max)
  lecture_id String  @db.VarChar(25)
  lecture    lecture @relation(fields: [lecture_id], references: [id], onUpdate: NoAction)
}

model system_log {
  id         Int      @id @default(autoincrement())
  action     String   @db.VarChar(30)
  timestamp  DateTime @default(dbgenerated("getutcdate()")) @db.DateTime
  learner_id String   @db.VarChar(25)
  learner    person   @relation(fields: [learner_id], references: [id], onUpdate: NoAction)
}

model tutorial {
  id                String              @id @db.VarChar(25)
  status            String              @db.VarChar(30)
  current_question  Int                 @default(1)
  learning_material learning_material   @relation(fields: [id], references: [id], onUpdate: NoAction)
  questions         tutorial_question[]
}

model tutorial_question {
  id                        Int                                 @id @default(autoincrement())
  question                  String                              @db.VarChar(MAX)
  question_number           Int
  answer                    String                              @db.VarChar(MAX)
  hint                      String?                             @db.VarChar(MAX)
  student_answer            String?                             @db.VarChar(MAX)
  is_student_answer_correct Boolean                             @default(false)
  feedback_type             String?                             @db.VarChar(10)
  feedback                  String?                             @db.VarChar(Max)
  type                      String                              @db.VarChar(13) // 'mcq' or 'short-answer'
  options                   mcq_tutorial_question_option[]
  tutorial_interaction      tutorial_interaction[]
  tutorial                  tutorial                            @relation(fields: [tutorial_id], references: [id], onUpdate: NoAction)
  tutorial_id               String                              @db.VarChar(25)
  sub_lesson                sub_lesson                          @relation(fields: [sub_lesson_id], references: [id])
  sub_lesson_id             Int
  cognitive_levels          tutorial_question_cognitive_level[]
}

model tutorial_question_cognitive_level {
  tutorial_question_id Int
  cognitive_level_id   Int
  cognitive_level      cognitive_level   @relation(fields: [cognitive_level_id], references: [id], onUpdate: NoAction)
  tutorial_question    tutorial_question @relation(fields: [tutorial_question_id], references: [id], onUpdate: NoAction)

  @@id([tutorial_question_id, cognitive_level_id])
}

model analytical_indicator {
  id                   String @id @default(cuid()) @db.VarChar(25)
  indicator_name       String @db.VarChar(100)
  analysis_goal        String @db.VarChar(250)
  visualization_choice String @db.VarChar(25)
  sql_query            String @db.VarChar(2000)
  instructor_id        String @db.VarChar(25)
  instructor           person @relation(fields: [instructor_id], references: [id], onUpdate: NoAction)
}

model labsheet_interaction {
  id                   Int               @id
  attempts             Int
  labsheet_question_id Int
  labsheet_question    labsheet_question @relation(fields: [labsheet_question_id], references: [id], onUpdate: NoAction)
  interaction          interaction       @relation(fields: [id], references: [id], onUpdate: NoAction)
}

model lecture_interaction {
  id          Int         @id
  views       Int
  lecture_id  String      @db.VarChar(25)
  lecture     lecture     @relation(fields: [lecture_id], references: [id], onUpdate: NoAction)
  interaction interaction @relation(fields: [id], references: [id], onUpdate: NoAction)
}

model mcq_tutorial_question_option {
  id                  Int                @id @default(autoincrement())
  answer_option       String             @db.VarChar(300)
  tutorial_question   tutorial_question? @relation(fields: [tutorial_questionId], references: [id])
  tutorial_questionId Int?
}

model person {
  id                   String                 @id @default(cuid()) @db.VarChar(25)
  first_name           String                 @db.VarChar(30)
  last_name            String                 @db.VarChar(30)
  email                String                 @unique @db.VarChar(30)
  password             String                 @db.VarChar(60)
  role                 String                 @db.VarChar(10)
  session              session[]
  learning_material    learning_material[]
  system_log           system_log[]
  analytical_indicator analytical_indicator[]
}

model tutorial_interaction {
  id                        Int               @id
  learner_answer            String            @db.VarChar(Max)
  attempts                  Int
  feedback_type             String            @db.VarChar(8)
  feedback                  String            @db.VarChar(Max)
  is_learner_answer_correct Boolean
  tutorial_question_id      Int
  tutorial_question         tutorial_question @relation(fields: [tutorial_question_id], references: [id], onUpdate: NoAction)
  interaction               interaction       @relation(fields: [id], references: [id], onUpdate: NoAction)
}
